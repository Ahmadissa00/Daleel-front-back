spring.application.name=rag-demo-project
# Vertex AI Configuration
#spring.ai.vertex.ai.gemini.project-id=${VERTEX_AI_PROJECT_ID}
#spring.ai.vertex.ai.gemini.location=${VERTEX_AI_LOCATION:us-central1}
#spring.ai.vertex.ai.gemini.chat.options.model=${VERTEX_AI_CHAT_MODEL:gemini-1.5-flash}
#spring.ai.vertex.ai.embedding.options.model=${VERTEX_AI_EMBEDDING_MODEL:text-embedding-004}



spring.ai.vertex.ai.gemini.chat.options.model=gemini-2.5-pro
spring.ai.vertex.ai.gemini.project-id=spring-ai-467922
spring.ai.vertex.ai.gemini.location=us-central1

spring.ai.vertex.ai.embedding.options.model=gemini-embedding-001
spring.ai.vertex.ai.embedding.project-id=spring-ai-467922
spring.ai.vertex.ai.embedding.location=us-central1


# Database configuration
#spring.datasource.url=${DATABASE_URL}
#spring.datasource.username=${DATABASE_USERNAME}
#spring.datasource.password=${DATABASE_PASSWORD}

# why ${PGHOST:first-rag-project-db.postgres.database.azure.com}?
# this is a way to provide a default value for the environment variable PGHOST
# if the environment variable PGHOST is not set, it will use the default value first
# please write them for me without environment variables

#spring.datasource.url=jdbc:postgresql://first-rag-project-db.postgres.database.azure.com:5432/just-trial?sslmode=require
#spring.datasource.username=administratorlogin
#spring.datasource.password=postgreSQL#1234

spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=root

spring.jpa.show-sql=true
spring.datasource.driver-class-name=org.postgresql.Driver

spring.main.allow-bean-definition-overriding=true

spring.sql.init.schema-locations=classpath:init/schema.sql
spring.sql.init.mode=${INIT_MODE}

server.port=9090

# Logging Configuration
logging.level.com.ibrahim.rag_demo_project=INFO
logging.level.org.springframework.ai=INFO
logging.level.org.springframework.web=INFO
logging.level.org.postgresql=WARN
logging.level.org.hibernate=WARN

# Log file output
logging.file.name=logs/rag-demo-app.log
logging.file.max-size=10MB
logging.file.max-history=30

# Console logging pattern
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n


# explain each mode from init modes
# create-drop: creates the schema at startup and drops it at shutdown
# always: creates the schema at startup, but does not drop it at shutdown
# never: does not create or drop the schema
# embedded: creates the schema only if an embedded database is used
# what do you mean by embedded database
# an embedded database is a database that runs in the same process as the application
# examples of embedded databases are H2, HSQLDB, and Derby

# i want to ask you question, if i use always mode, will it create a new table each time i start the application
# no, it will not create a new table if the table already exists
# it will only create the table if it does not exist
# if you want to drop the table and create a new one each time, you can use create-drop mode
# if you want to keep the data in the table, you can use never mode

# in production, which mode should i use
# in production, you should use never mode to avoid accidental data loss
# ok, thank you , but what about when i deploy the project on cloud, which mode should i use?
# in cloud, you should also use never mode to avoid accidental data loss
# but what if i want to update the schema, how can i do that
# you can use a database migration tool like Flyway or Liquibase to manage schema changes
# these tools allow you to version your database schema and apply changes incrementally
# ok, but what if i want to create the schema from scratch on the cloud deployment
# in that case, you can use always mode for the initial deployment to create the schema
# and then switch to never mode for subsequent deployments to avoid data loss
# how can i switch the mode
# you can change the mode in the application.properties file and redeploy the application
# i think here i must use the environment variable to set the mode
# yes, you can use environment variables to override the properties in application.properties
# thank you very much for your help
# you're welcome! if you have any more questions, feel free to ask

